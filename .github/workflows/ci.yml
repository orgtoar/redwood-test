name: ‚öôÔ∏è CI

on:
  pull_request

# Cancel in-progress runs of this workflow.
# See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-only-cancel-in-progress-jobs-or-runs-for-the-current-workflow.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  only-doc-changes:
    name: üìñ Only doc changes?
    runs-on: ubuntu-latest
    outputs:
      only-doc-changes: ${{ steps.only-doc-changes.outputs.only-doc-changes }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - run: yarn install
        working-directory: ./.github/actions/only_doc_changes

      - name: üìñ Only doc changes?
        id: only-doc-changes
        uses: ./.github/actions/only_doc_changes

  check:
    needs: only-doc-changes
    if: needs.only-doc-changes.outputs.only-doc-changes == 'false'
    name: ‚úÖ Check constraints, dependencies, and package.json's
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: yarn install
        working-directory: ./tasks/check

      - name: ‚úÖ Check constraints, dependencies, and package.json's
        uses: ./tasks/check

  check-docs:
    needs: only-doc-changes
    if: needs.only-doc-changes.outputs.only-doc-changes == 'true'
    name: ‚úÖ Check constraints, dependencies, and package.json's
    runs-on: ubuntu-latest
    steps:
      - run: echo "Only doc changes"

  build-lint-test:
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: true
    name: üèó Build, lint, test / ${{ matrix.os }} / node 18 latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Remove the tsc problem matcher if not ubuntu-latest
        if: matrix.os != 'ubuntu-latest'
        run: echo "echo "::remove-matcher owner=tsc::""

      - uses: actions/checkout@v3
      - name: üß∂ Set up job
        uses: ./.github/actions/set-up-job

      - name: üî® Build
        run: yarn build

      - name: üîé Lint
        run: yarn lint

      - name: Get number of CPU cores
        if: always()
        id: cpu-cores
        uses: SimenB/github-actions-cpu-cores@v1

      - name: üß™ Test
        run: yarn test-ci ${{ steps.cpu-cores.outputs.count }}

  build-lint-test-docs:
    needs: only-doc-changes
    if: needs.only-doc-changes.outputs.only-doc-changes == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    name: üèó Build, lint, test / ${{ matrix.os }} / node 18 latest
    runs-on: ${{ matrix.os }}
    steps:
      - run: echo "Only doc changes"

  tutorial-e2e:
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest]
      fail-fast: true
    name: üå≤ Tutorial E2E / ${{ matrix.os }} / node 18 latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: üß∂ Set up job
        uses: ./.github/actions/set-up-job

      - name: üìÅ Create a temporary directory
        id: createpath
        run: |
          project_path=$(mktemp -d -t redwood.XXXXXX)
          echo "::set-output name=project_path::$project_path"
          framework_path=$(pwd)
          echo "::set-output name=framework_path::$framework_path"

      - name: üå≤ Create a Redwood App
        run: ./tasks/run-e2e ${{ steps.createpath.outputs.project_path }} --no-start
        env:
          YARN_ENABLE_IMMUTABLE_INSTALLS: false

      - name: üêô Git init in the Redwood App directory
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          git init --initial-branch main && git add .
          git commit -a --message=init
        working-directory: ${{ steps.createpath.outputs.project_path }}

      - name: Start server in background
        run: yarn rw dev --no-generate --fwd="--no-open" &
        working-directory: ${{ steps.createpath.outputs.project_path }}

      - name: üå≤ Run cypress
        uses: cypress-io/github-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_RW_PATH:  "${{ steps.createpath.outputs.project_path }}"
        with:
          # We've already installed dependencies.
          install: false
          env: true
          browser: chrome
          record: false
          wait-on: 'http://[::1]:8910'
          working-directory: ./tasks/e2e
          spec: |
             cypress/e2e/01-tutorial/*.cy.js
             cypress/e2e/04-logger/*.cy.js

  tutorial-e2e-docs:
    needs: only-doc-changes
    if: needs.only-doc-changes.outputs.only-doc-changes == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest]
    name: üå≤ Tutorial E2E / ${{ matrix.os }} / node 18 latest
    runs-on: ${{ matrix.os }}
    steps:
      - run: echo "Only doc changes"

  smoke-test:
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: true
    name: üëÄ Smoke test / ${{ matrix.os }} / node 18 latest
    runs-on: ${{ matrix.os }}
    env:
      REDWOOD_CI: 1
      REDWOOD_VERBOSE_TELEMETRY: 1
      # This makes sure that playwright dependencies are cached in node_modules.
      PLAYWRIGHT_BROWSERS_PATH: 0
    steps:
      - uses: actions/checkout@v3
      - name: üß∂ Set up job
        uses: ./.github/actions/set-up-job

      - name: üå≤ Setup test project
        id: setup_test_project
        uses: ./.github/actions/setup_test_project
        env:
          REDWOOD_DISABLE_TELEMETRY: 1
          YARN_ENABLE_IMMUTABLE_INSTALLS: false

      - name: üé≠ Install playwright dependencies
        run: npx playwright install --with-deps chromium

      - name: Run `rw build` without prerender
        run: |
          yarn rw build --no-prerender
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run `rw prerender`
        run: |
          yarn rw prerender --verbose
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run smoke tests on 'rw dev', 'rw serve', 'rw storybook'
        working-directory: ./tasks/smoke-test
        run: npx playwright test --project ${{ matrix.os == 'ubuntu-latest' && 'replay-chromium' || 'chromium' }} --reporter @replayio/playwright/reporter,line
        env:
          PROJECT_PATH: ${{ steps.setup_test_project.outputs.test_project_path }}
          REDWOOD_DISABLE_TELEMETRY: 1
          RECORD_REPLAY_METADATA_TEST_RUN_TITLE: Smoke test / ${{ matrix.os }} / node 18 latest
          RECORD_REPLAY_TEST_METRICS: 1

      - name: Run `rw info`
        run: |
          yarn rw info
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run `rw lint`
        run: |
          yarn rw lint ./api/src --fix
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "rw test api"
        run: |
          yarn rw test api --no-watch
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "rw test web"
        run: |
          yarn rw test web --no-watch
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "rw check"
        run: |
          yarn rw check
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "rw storybook"
        run: |
          yarn rw sb --smoke-test
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "rw exec"
        run: |
          yarn rw g script testScript && yarn rw exec testScript
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "prisma generate"
        run: |
          yarn rw prisma generate
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "rw data-migrate"
        run: |
          yarn rw dataMigrate up
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "data-migrate install"
        run: |
          yarn rw data-migrate install
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "prisma migrate"
        run: |
          yarn rw prisma migrate dev --name ci-test
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run `rw deploy --help`
        run: yarn rw setup deploy --help && yarn rw deploy --help
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run `rw setup ui --help`
        run: yarn rw setup --help && yarn rw setup ui --help
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "g page"
        run: |
          yarn rw g page ciTest
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "g sdl"
        run: |
          yarn rw g sdl userExample
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "rw type-check"
        run: |
          yarn rw type-check
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Throw Error | Run `rw g sdl <model>`
        run: |
          yarn rw g sdl DoesNotExist
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}
        continue-on-error: true

      - name: Upload Replays
        if: always()
        uses: replayio/action-upload@v0.4.7
        with:
          api-key: rwk_cZn4WLe8106j6tC5ygNQxDpxAwCLpFo5oLQftiRN7OP

  smoke-test-docs:
    needs: only-doc-changes
    if: needs.only-doc-changes.outputs.only-doc-changes == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    name: üëÄ Smoke test / ${{ matrix.os }} / node 18 latest
    runs-on: ${{ matrix.os }}
    steps:
      - run: echo "Only doc changes"

  telemetry-check:
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: true
    name: üî≠ Telemetry check / ${{ matrix.os }} / node 18 latest
    runs-on: ${{ matrix.os }}
    env:
      REDWOOD_REDIRECT_TELEMETRY: "http://127.0.0.1:48619" # Random port
    steps:
      - uses: actions/checkout@v3
      - name: üß∂ Set up job
        uses: ./.github/actions/set-up-job

      - name: üî® Build
        run: yarn build

      - name: üì¢ Listen for telemetry (CRWA)
        run: node ./.github/actions/telemetry_check/check.mjs --mode crwa
        env:
          YARN_ENABLE_IMMUTABLE_INSTALLS: false

      - name: üì¢ Listen for telemetry (CLI)
        run: node ./.github/actions/telemetry_check/check.mjs --mode cli

  telemetry-check-docs:
    needs: only-doc-changes
    if: needs.only-doc-changes.outputs.only-doc-changes == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    name: üî≠ Telemetry check / ${{ matrix.os }} / node 18 latest
    runs-on: ${{ matrix.os }}
    steps:
      - run: echo "Only doc changes"
