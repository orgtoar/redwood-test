name: ‚öôÔ∏è CI

on:
  pull_request

# Cancel in-progress runs of this workflow.
# See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-only-cancel-in-progress-jobs-or-runs-for-the-current-workflow.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  smoke-test:
    strategy:
      matrix:
        os: [ubuntu-latest]
        # os: [ubuntu-latest, windows-latest]
      fail-fast: false

    name: Smoke tests / ${{ matrix.os }} / node 18 latest
    runs-on: ${{ matrix.os }}

    env:
      REDWOOD_CI: 1
      REDWOOD_VERBOSE_TELEMETRY: 1
      # This makes sure that playwright dependencies are cached in node_modules.
      PLAYWRIGHT_BROWSERS_PATH: 0

    steps:
      - uses: actions/checkout@v3

      # We could do caching here but...
      - name: ‚¨¢ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # We try to cache and restore yarn's cache directory and install state to speed up the yarn install step.
      # Caching yarn's cache directory avoids its fetch step.
      #
      # See:
      # - https://gist.github.com/belgattitude/042f9caf10d029badbde6cf9d43e400a
      # - https://github.com/yarnpkg/berry/discussions/2621
      - name: üìÅ Get yarn cache directory
        id: get-yarn-cache-directory
        run: echo "CACHE_DIRECTORY=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
        shell: bash

      # If the hashFiles doesn't match, the cache will probably be incomplete, but...
      - name: ‚ôªÔ∏è Restore yarn cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.get-yarn-cache-directory.outputs.CACHE_DIRECTORY }}
          key: yarn-cache-${{ runner.os }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}
          restore-keys: yarn-cache-${{ runner.os }}

      - name: ‚ôªÔ∏è Restore yarn install state
        uses: actions/cache@v3
        with:
          path: .yarn/install-state.gz
          key: yarn-install-state-${{ runner.os }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

      - name: ‚ôªÔ∏è Restore node_modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: yarn-node-modules-${{ runner.os }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

      # `--inline-builds` is only for debugging. It tells Yarn to print the output of dependencies' build steps instead of writing them to files
      # See https://yarnpkg.com/cli/install#options-inline-builds.
      # We include the GitHub token to avoid rate limiting when installing `@vscode/ripgrep`.
      - name: üêà Yarn install
        run: yarn install --inline-builds
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: üî® Build
        run: yarn build

      - name: üìÅ Get test project directory
        id: get-test-project-directory
        run: |
          echo "TEST_PROJECT_PATH=$(node -e "console.log(require('path').join(require('os').tmpdir(), 'test-project', new Date().toISOString().split(':').join('-')))")" >> $GITHUB_OUTPUT
        shell: bash

      - name: ‚ôªÔ∏è Restore test project cache
        id: restore-test-project-cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.get-test-project-directory.outputs.TEST_PROJECT_PATH }}
          key: yarn-cache-${{ runner.os }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

      - name: üå≤ Set up test project
        if: steps.restore-test-project-cache.outputs.cache-hit != 'true'
        id: set-up-test-project
        uses: ./.github/actions/set-up-test-project
        env:
          REDWOOD_DISABLE_TELEMETRY: 1
          YARN_ENABLE_IMMUTABLE_INSTALLS: false

      # - name: üé≠ Install playwright dependencies
      #   run: npx playwright install --with-deps chromium

      # - name: Run dev smoke tests
      #   working-directory: ./tasks/smoke-tests/dev
      #   run: npx playwright test --reporter html
      #   env:
      #     REDWOOD_PROJECT_PATH: '${{ steps.set-up-test-project.outputs.TEST_PROJECT_PATH }}'
      #     REDWOOD_DISABLE_TELEMETRY: 1

      # - name: üîê Run auth smoke tests
      #   working-directory: ./tasks/smoke-tests/auth
      #   run: npx playwright test
      #   env:
      #     REDWOOD_PROJECT_PATH: ${{ steps.set-up-test-project.outputs.TEST_PROJECT_PATH }}
      #     REDWOOD_DISABLE_TELEMETRY: 1

      # - name: ‚å®Ô∏è Run `rw build --no-prerender`
      #   run: |
      #     yarn rw build --no-prerender
      #   working-directory: ${{ steps.set-up-test-project.outputs.TEST_PROJECT_PATH }}

      # - name: ‚å®Ô∏è Run `rw prerender`
      #   run: |
      #     yarn rw prerender --verbose
      #   working-directory: ${{ steps.set-up-test-project.outputs.TEST_PROJECT_PATH }}

      # - name: üñ•Ô∏è Run serve smoke tests
      #   working-directory: ./tasks/smoke-tests/serve
      #   run: npx playwright test
      #   env:
      #     REDWOOD_PROJECT_PATH: ${{ steps.set-up-test-project.outputs.TEST_PROJECT_PATH }}
      #     REDWOOD_DISABLE_TELEMETRY: 1

      # - name: üìÑ Run prerender smoke tests
      #   working-directory: ./tasks/smoke-tests/prerender
      #   run: npx playwright test
      #   env:
      #     REDWOOD_PROJECT_PATH: ${{ steps.set-up-test-project.outputs.TEST_PROJECT_PATH }}
      #     REDWOOD_DISABLE_TELEMETRY: 1

      # - name: üìï Run Storybook smoke tests
      #   working-directory: ./tasks/smoke-tests/storybook
      #   run: npx playwright test
      #   env:
      #     REDWOOD_PROJECT_PATH: ${{ steps.set-up-test-project.outputs.TEST_PROJECT_PATH }}
      #     REDWOOD_DISABLE_TELEMETRY: 1

      # - name: ‚¨ÜÔ∏è Upload Playwright reports
      #   uses: actions/upload-artifact@v3
      #   if: always()
      #   with:
      #     name: playwright-report
      #     path: ./playwright-report
      #     retention-days: 7
