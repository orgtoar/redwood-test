name: ‚öôÔ∏è CI

on:
  pull_request

jobs:
  only-doc-changes:
    # if: github.repository == 'redwoodjs/redwood'
    name: üìñ Only doc changes?
    runs-on: ubuntu-latest
    outputs:
      only-doc-changes: ${{ steps.only-doc-changes.outputs.only-doc-changes }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - run: yarn install
        working-directory: ./.github/actions/only_doc_changes

      - name: üìñ Only doc changes?
        id: only-doc-changes
        uses: ./.github/actions/only_doc_changes

  check:
    needs: only-doc-changes
    if: needs.only-doc-changes.outputs.only-doc-changes == 'false'
    name: ‚úÖ Check constraints, dependencies, and package.json's
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: yarn install
        working-directory: ./tasks/check

      - name: ‚úÖ Check constraints, dependencies, and package.json's
        uses: ./tasks/check

  check-docs:
    needs: only-doc-changes
    if: needs.only-doc-changes.outputs.only-doc-changes == 'true'
    name: ‚úÖ Check constraints, dependencies, and package.json's
    runs-on: ubuntu-latest
    steps:
      - run: echo "Only doc changes"

  build-lint-test:
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [14, 16]
      fail-fast: true
    name: üèó Build, lint, test / ${{ matrix.os }} / node ${{ matrix.node-version }} latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Remove the tsc problem matcher if not ubuntu-latest, node 16
        if: (matrix.os == 'ubuntu-latest' && matrix.node-version == '16') == false
        run: echo "echo "::remove-matcher owner=tsc::""

      - uses: actions/checkout@v3
      - name: üß∂ Setup job
        uses: ./.github/actions/setup_job
        with:
          node-version: ${{ matrix.node-version }}

      - name: üî® Build
        run: yarn build

      # - name: üîé Lint
      #   run: yarn lint

      # - name: Get number of CPU cores
      #   if: always()
      #   id: cpu-cores
      #   uses: SimenB/github-actions-cpu-cores@v1

      # - name: üß™ Test
      #   run: yarn test-ci ${{ steps.cpu-cores.outputs.count }}

      - name: ‚å®Ô∏è CLI Test (cwd, env)
        uses: ./tasks/cli-test

  build-lint-test-docs:
    needs: only-doc-changes
    if: needs.only-doc-changes.outputs.only-doc-changes == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [14, 16]
    name: üèó Build, lint, test / ${{ matrix.os }} / node ${{ matrix.node-version }} latest
    runs-on: ${{ matrix.os }}
    steps:
      - run: echo "Only doc changes"

  tutorial-e2e:
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14, 16]
      fail-fast: true
    name: üå≤ Tutorial E2E / ${{ matrix.os }} / node ${{ matrix.node-version }} latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: üß∂ Setup job
        uses: ./.github/actions/setup_job
        with:
          node-version: ${{ matrix.node-version }}

      - name: üìÅ Create a temporary directory
        id: createpath
        run: |
          project_path=$(mktemp -d -t redwood.XXXXXX)
          echo "::set-output name=project_path::$project_path"
          framework_path=$(pwd)
          echo "::set-output name=framework_path::$framework_path"

      - name: üå≤ Create a Redwood App
        run: ./tasks/run-e2e ${{ steps.createpath.outputs.project_path }} --no-start
        env:
          YARN_ENABLE_IMMUTABLE_INSTALLS: false

      - name: üêô Git init in the Redwood App directory
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          git init --initial-branch main && git add .
          git commit -a --message=init
        working-directory: ${{ steps.createpath.outputs.project_path }}

      - name: Start server in background
        run: yarn rw dev --no-generate --fwd="--no-open" &
        working-directory: ${{ steps.createpath.outputs.project_path }}

      - name: üå≤ Run cypress
        uses: cypress-io/github-action@v2
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_RW_PATH:  "${{ steps.createpath.outputs.project_path }}"
        with:
          # We've already installed dependencies.
          install: false
          env: true
          browser: chrome
          record: false
          wait-on: 'http://localhost:8910'
          working-directory: ./tasks/e2e
          spec: |
             cypress/integration/01-tutorial/*.spec.js
             cypress/integration/04-logger/*.spec.js

  tutorial-e2e-docs:
    needs: only-doc-changes
    if: needs.only-doc-changes.outputs.only-doc-changes == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14, 16]
    name: üå≤ Tutorial E2E / ${{ matrix.os }} / node ${{ matrix.node-version }} latest
    runs-on: ${{ matrix.os }}
    steps:
      - run: echo "Only doc changes"

  smoke-test:
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [14, 16]
      fail-fast: true
    name: üëÄ Smoke test / ${{ matrix.os }} / node ${{ matrix.node-version }} latest
    runs-on: ${{ matrix.os }}
    env:
      REDWOOD_CI: 1
      REDWOOD_VERBOSE_TELEMETRY: 1
      # This makes sure that playwright dependencies are cached in node_modules.
      PLAYWRIGHT_BROWSERS_PATH: 0
    steps:
      - uses: actions/checkout@v3
      - name: üß∂ Setup job
        uses: ./.github/actions/setup_job
        with:
          node-version: ${{ matrix.node-version }}

      - name: üå≤ Setup test project
        id: setup_test_project
        uses: ./.github/actions/setup_test_project
        env:
          REDWOOD_DISABLE_TELEMETRY: 1
          YARN_ENABLE_IMMUTABLE_INSTALLS: false

      - name: üé≠ Install playwright dependencies
        run: npx playwright install --with-deps chromium

      - name: Run `rw build` without prerender
        run: |
          yarn rw build --no-prerender
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run `rw prerender`
        run: |
          yarn rw prerender --verbose
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run smoke tests on 'rw dev', 'rw serve', 'rw storybook'
        working-directory: ./tasks/smoke-test
        run: npx playwright test
        env:
          PROJECT_PATH: ${{ steps.setup_test_project.outputs.test_project_path }}
          REDWOOD_DISABLE_TELEMETRY: 1

      - name: Run `rw info`
        run: |
          yarn rw info
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run `rw lint`
        run: |
          yarn rw lint ./api/src --fix
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "rw test api"
        run: |
          yarn rw test api --no-watch
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "rw test web"
        run: |
          yarn rw test web --no-watch
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "rw check"
        run: |
          yarn rw check
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "rw storybook"
        run: |
          yarn rw sb --smoke-test
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "rw exec"
        run: |
          yarn rw g script testScript && yarn rw exec testScript
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "prisma generate"
        run: |
          yarn rw prisma generate
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "rw data-migrate"
        run: |
          yarn rw dataMigrate up
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "data-migrate install"
        run: |
          yarn rw data-migrate install
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "prisma migrate"
        run: |
          yarn rw prisma migrate dev --name ci-test
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run `rw deploy --help`
        run: yarn rw setup deploy --help && yarn rw deploy --help
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run `rw setup ui --help`
        run: yarn rw setup --help && yarn rw setup ui --help
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "g page"
        run: |
          yarn rw g page ciTest
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "g sdl"
        run: |
          yarn rw g sdl userExample
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Run "rw type-check"
        run: |
          yarn rw type-check
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}

      - name: Throw Error | Run `rw g sdl <model>`
        run: |
          yarn rw g sdl DoesNotExist
        working-directory: ${{ steps.setup_test_project.outputs.test_project_path }}
        continue-on-error: true

  smoke-test-docs:
    needs: only-doc-changes
    if: needs.only-doc-changes.outputs.only-doc-changes == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [14, 16]
    name: üëÄ Smoke test / ${{ matrix.os }} / node ${{ matrix.node-version }} latest
    runs-on: ${{ matrix.os }}
    steps:
      - run: echo "Only doc changes"
