name: ‚öôÔ∏è CI

on:
  pull_request

# Cancel in-progress runs of this workflow.
# See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-only-cancel-in-progress-jobs-or-runs-for-the-current-workflow.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  smoke-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false

    name: üëÄ Smoke test / ${{ matrix.os }} / node 18 latest
    runs-on: ${{ matrix.os }}

    env:
      REDWOOD_CI: 1
      REDWOOD_VERBOSE_TELEMETRY: 1
      # This makes sure that playwright dependencies are cached in node_modules.
      PLAYWRIGHT_BROWSERS_PATH: 0

    steps:
      - uses: actions/checkout@v3

      # We could do caching here but...
      - name: ‚¨¢ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # We try to cache and restore yarn's cache directory and install state
      # to speed up the yarn install step.
      # Caching the cache directory avoids the fetch step.
      # Here's the gist I used as a reference: https://gist.github.com/belgattitude/042f9caf10d029badbde6cf9d43e400a.
      # Here's another in-depth answer by the yarn team: https://github.com/yarnpkg/berry/discussions/2621
      - name: üîë Get yarn cache keys
        id: yarn-cache-keys
        shell: bash
        run: |
          echo "CACHE_DIR=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
          echo "NODE_VERSION="node-$(node --version)"" >> $GITHUB_OUTPUT
          echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's,/,-,g')" >> $GITHUB_OUTPUT

      - name: ‚ôªÔ∏è Restore yarn cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-keys.outputs.CACHE_DIR }}
          key: yarn-cache-${{ runner.os }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}
          restore-keys: |
            yarn-cache-${{ runner.os }}

      - name: ‚ôªÔ∏è Restore yarn install state
        uses: actions/cache@v3
        with:
          path: .yarn/install-state.gz
          key: yarn-install-state-cache-${{ runner.os }}-${{ steps.yarn-cache-keys.outputs.NODE_VERSION }}-${{ steps.yarn-cache-keys.outputs.BRANCH }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

      # - name: ‚ôªÔ∏è Restore node_modules
      #   uses: actions/cache@v3
      #   with:
      #     path: **/node_modules
      #     key: yarn-node-modules-cache-${{ runner.os }}-${{ steps.yarn-config.outputs.NODE_VERSION }}-${{ steps.yarn-config.outputs.BRANCH }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

      # `--inline-builds` is only for debugging. It tells Yarn to print the output of dependencies' build steps instead of writing them to files
      # See https://yarnpkg.com/cli/install#options-inline-builds.
      # We include the GitHub token to avoid rate limiting when installing `@vscode/ripgrep`.
      - name: üêà Yarn install
        run: yarn install --inline-builds
        shell: bash
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: üî® Build
        run: yarn build

      - name: üå≤ Set up test project
        id: set-up-test-project
        run: yarn node ./tasks/test-project/test-project-link.mjs --ci
        shell: bash
        env:
          REDWOOD_DISABLE_TELEMETRY: 1
          YARN_ENABLE_IMMUTABLE_INSTALLS: false

      - name: üé≠ Install playwright dependencies
        run: npx playwright install --with-deps chromium

      - name: Run dev smoke tests
        working-directory: ./tasks/smoke-tests/dev
        run: npx playwright test --reporter html
        env:
          REDWOOD_PROJECT_PATH: ${{ steps.set-up-test-project.outputs.TEST_PROJECT_PATH }}
          REDWOOD_DISABLE_TELEMETRY: 1

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: ./playwright-report
          retention-days: 7


      # - name: Run `rw build` without prerender
      #   run: |
      #     yarn rw build --no-prerender
      #   working-directory: ${{ steps.set-up-test-project.outputs.test-project-path }}

      # - name: Run `rw prerender`
      #   run: |
      #     yarn rw prerender --verbose
      #   working-directory: ${{ steps.set-up-test-project.outputs.test-project-path }}

      # - name: Run serve smoke tests
      #   working-directory: ./tasks/smoke-tests/serve
      #   run: npx playwright test
      #   env:
      #     REDWOOD_PROJECT_PATH: ${{ steps.set-up-test-project.outputs.test-project-path }}
      #     REDWOOD_DISABLE_TELEMETRY: 1

      # - name: üìÑ Run prerender smoke tests
      #   working-directory: ./tasks/smoke-tests/prerender
      #   run: npx playwright test
      #   env:
      #     REDWOOD_PROJECT_PATH: ${{ steps.set-up-test-project.outputs.test-project-path }}
      #     REDWOOD_DISABLE_TELEMETRY: 1

      # # - name: Run auth smoke tests
      # #   working-directory: ./tasks/smoke-tests/auth
      # #   run: npx playwright test
      # #   env:
      # #     REDWOOD_PROJECT_PATH: ${{ steps.set-up-test-project.outputs.test-project-path }}
      # #     REDWOOD_DISABLE_TELEMETRY: 1

      # - name: üìï Run Storybook smoke tests
      #   working-directory: ./tasks/smoke-tests/storybook
      #   run: npx playwright test
      #   env:
      #     REDWOOD_PROJECT_PATH: ${{ steps.set-up-test-project.outputs.test-project-path }}
      #     REDWOOD_DISABLE_TELEMETRY: 1

      # # - uses: actions/upload-artifact@v3
      # #   if: always()
      # #   with:
      # #     name: playwright-report
      # #     path: tasks/smoke-test/playwright-report
      # #     retention-days: 7

