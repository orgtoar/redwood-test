import type { Auth0, Auth0User } from './auth0';
import { AuthClient } from './AuthClient';
import type { AzureActiveDirectory, AzureActiveDirectoryUser } from './azureActiveDirectory';
import type { Clerk, ClerkUser } from './clerk';
import type { Custom } from './custom';
import type { DbAuth, DbAuthConfig } from './dbAuth';
import type { Ethereum, EthereumUser } from './ethereum';
import type { FirebaseClient, FirebaseUser } from './firebase';
import type { GoTrue, GoTrueUser } from './goTrue';
import type { MagicLink, MagicUser } from './magicLink';
import type { NetlifyIdentity } from './netlify';
import type { Nhost, NhostUser } from './nhost';
import type { Okta, OktaUser } from './okta';
import type { Supabase, SupabaseUser } from './supabase';
import type { SuperTokensUser, SuperTokens } from './supertokens';
export declare type AuthFactory<ClientType, ConfigType, AuthClientType extends AuthClient> = (client: ClientType, config: ConfigType) => AuthClientType | Promise<AuthClientType>;
export declare const typesToClients: Record<string, AuthFactory<any, any, any>>;
export declare type SupportedAuthClients = Auth0 | AzureActiveDirectory | DbAuth | GoTrue | NetlifyIdentity | MagicLink | FirebaseClient | Supabase | Clerk | Ethereum | Nhost | SuperTokens | Okta | Custom;
export declare type SupportedAuthTypes = keyof typeof typesToClients;
export declare type SupportedAuthConfig = DbAuthConfig;
export type { Auth0User };
export type { AzureActiveDirectoryUser };
export type { DbAuth };
export type { ClerkUser };
export type { FirebaseUser };
export type { GoTrueUser };
export type { MagicUser };
export type { SupabaseUser };
export type { EthereumUser };
export type { NhostUser };
export type { SuperTokensUser };
export type { OktaUser };
export declare type SupportedUserMetadata = Auth0User | AzureActiveDirectoryUser | ClerkUser | FirebaseUser | GoTrueUser | MagicUser | SupabaseUser | EthereumUser | NhostUser | SuperTokensUser | OktaUser;
//# sourceMappingURL=SupportedAuthClients.d.ts.map