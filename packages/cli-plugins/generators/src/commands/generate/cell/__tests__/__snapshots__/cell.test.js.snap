// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`"equipment" with list flag 1`] = `
"export const QUERY = gql\`
  query EquipmentListQuery {
    equipmentList {
      id
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Empty</div>

export const Failure = ({ error }) => (
  <div style={{ color: 'red' }}>Error: {error?.message}</div>
)

export const Success = ({ equipmentList }) => {
  return (
    <ul>
      {equipmentList.map((item) => {
        return <li key={item.id}>{JSON.stringify(item)}</li>
      })}
    </ul>
  )
}
"
`;

exports[`"equipment" withOUT list flag should find equipment by id 1`] = `
"export const QUERY = gql\`
  query FindEquipmentQuery($id: Int!) {
    equipment: equipment(id: $id) {
      id
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Empty</div>

export const Failure = ({ error }) => (
  <div style={{ color: 'red' }}>Error: {error?.message}</div>
)

export const Success = ({ equipment }) => {
  return <div>{JSON.stringify(equipment)}</div>
}
"
`;

exports[`Kebab case words creates a cell component with a kebabCase word name 1`] = `
"export const QUERY = gql\`
  query FindUserProfileQuery($id: Int!) {
    userProfile: userProfile(id: $id) {
      id
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Empty</div>

export const Failure = ({ error }) => (
  <div style={{ color: 'red' }}>Error: {error?.message}</div>
)

export const Success = ({ userProfile }) => {
  return <div>{JSON.stringify(userProfile)}</div>
}
"
`;

exports[`Kebab case words creates a cell mock with a kebabCase word name 1`] = `
"// Define your own mock data here:
export const standard = (/* vars, { ctx, req } */) => ({
  userProfile: {
    id: 42,
  },
})
"
`;

exports[`Kebab case words creates a cell stories with a kebabCase word name 1`] = `
"import { Loading, Empty, Failure, Success } from './UserProfileCell'
import { standard } from './UserProfileCell.mock'

export const loading = () => {
  return Loading ? <Loading /> : <></>
}

export const empty = () => {
  return Empty ? <Empty /> : <></>
}

export const failure = (args) => {
  return Failure ? <Failure error={new Error('Oh no')} {...args} /> : <></>
}

export const success = (args) => {
  return Success ? <Success {...standard()} {...args} /> : <></>
}

export default { title: 'Cells/UserProfileCell' }
"
`;

exports[`Kebab case words creates a cell test with a kebabCase word name 1`] = `
"import { render } from '@redwoodjs/testing/web'
import { Loading, Empty, Failure, Success } from './UserProfileCell'
import { standard } from './UserProfileCell.mock'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//           Please refer to the RedwoodJS Testing Docs:
//        https://redwoodjs.com/docs/testing#testing-cells
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('UserProfileCell', () => {
  it('renders Loading successfully', () => {
    expect(() => {
      render(<Loading />)
    }).not.toThrow()
  })

  it('renders Empty successfully', async () => {
    expect(() => {
      render(<Empty />)
    }).not.toThrow()
  })

  it('renders Failure successfully', async () => {
    expect(() => {
      render(<Failure error={new Error('Oh no')} />)
    }).not.toThrow()
  })

  // When you're ready to test the actual output of your component render
  // you could test that, for example, certain text is present:
  //
  // 1. import { screen } from '@redwoodjs/testing/web'
  // 2. Add test: expect(screen.getByText('Hello, world')).toBeInTheDocument()

  it('renders Success successfully', async () => {
    expect(() => {
      render(<Success userProfile={standard().userProfile} />)
    }).not.toThrow()
  })
})
"
`;

exports[`Multiword files creates a cell component with a multi word name 1`] = `
"export const QUERY = gql\`
  query FindUserProfileQuery($id: Int!) {
    userProfile: userProfile(id: $id) {
      id
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Empty</div>

export const Failure = ({ error }) => (
  <div style={{ color: 'red' }}>Error: {error?.message}</div>
)

export const Success = ({ userProfile }) => {
  return <div>{JSON.stringify(userProfile)}</div>
}
"
`;

exports[`Multiword files creates a cell mock with a multi word name 1`] = `
"// Define your own mock data here:
export const standard = (/* vars, { ctx, req } */) => ({
  userProfile: {
    id: 42,
  },
})
"
`;

exports[`Multiword files creates a cell stories with a multi word name 1`] = `
"import { Loading, Empty, Failure, Success } from './UserProfileCell'
import { standard } from './UserProfileCell.mock'

export const loading = () => {
  return Loading ? <Loading /> : <></>
}

export const empty = () => {
  return Empty ? <Empty /> : <></>
}

export const failure = (args) => {
  return Failure ? <Failure error={new Error('Oh no')} {...args} /> : <></>
}

export const success = (args) => {
  return Success ? <Success {...standard()} {...args} /> : <></>
}

export default { title: 'Cells/UserProfileCell' }
"
`;

exports[`Multiword files creates a cell test with a multi word name 1`] = `
"import { render } from '@redwoodjs/testing/web'
import { Loading, Empty, Failure, Success } from './UserProfileCell'
import { standard } from './UserProfileCell.mock'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//           Please refer to the RedwoodJS Testing Docs:
//        https://redwoodjs.com/docs/testing#testing-cells
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('UserProfileCell', () => {
  it('renders Loading successfully', () => {
    expect(() => {
      render(<Loading />)
    }).not.toThrow()
  })

  it('renders Empty successfully', async () => {
    expect(() => {
      render(<Empty />)
    }).not.toThrow()
  })

  it('renders Failure successfully', async () => {
    expect(() => {
      render(<Failure error={new Error('Oh no')} />)
    }).not.toThrow()
  })

  // When you're ready to test the actual output of your component render
  // you could test that, for example, certain text is present:
  //
  // 1. import { screen } from '@redwoodjs/testing/web'
  // 2. Add test: expect(screen.getByText('Hello, world')).toBeInTheDocument()

  it('renders Success successfully', async () => {
    expect(() => {
      render(<Success userProfile={standard().userProfile} />)
    }).not.toThrow()
  })
})
"
`;

exports[`Single word files creates a cell component with a single word name 1`] = `
"export const QUERY = gql\`
  query FindUserQuery($id: Int!) {
    user: user(id: $id) {
      id
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Empty</div>

export const Failure = ({ error }) => (
  <div style={{ color: 'red' }}>Error: {error?.message}</div>
)

export const Success = ({ user }) => {
  return <div>{JSON.stringify(user)}</div>
}
"
`;

exports[`Single word files creates a cell mock with a single word name 1`] = `
"// Define your own mock data here:
export const standard = (/* vars, { ctx, req } */) => ({
  user: {
    id: 42,
  },
})
"
`;

exports[`Single word files creates a cell stories with a single word name 1`] = `
"import { Loading, Empty, Failure, Success } from './UserCell'
import { standard } from './UserCell.mock'

export const loading = () => {
  return Loading ? <Loading /> : <></>
}

export const empty = () => {
  return Empty ? <Empty /> : <></>
}

export const failure = (args) => {
  return Failure ? <Failure error={new Error('Oh no')} {...args} /> : <></>
}

export const success = (args) => {
  return Success ? <Success {...standard()} {...args} /> : <></>
}

export default { title: 'Cells/UserCell' }
"
`;

exports[`Single word files creates a cell test with a single word name 1`] = `
"import { render } from '@redwoodjs/testing/web'
import { Loading, Empty, Failure, Success } from './UserCell'
import { standard } from './UserCell.mock'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//           Please refer to the RedwoodJS Testing Docs:
//        https://redwoodjs.com/docs/testing#testing-cells
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('UserCell', () => {
  it('renders Loading successfully', () => {
    expect(() => {
      render(<Loading />)
    }).not.toThrow()
  })

  it('renders Empty successfully', async () => {
    expect(() => {
      render(<Empty />)
    }).not.toThrow()
  })

  it('renders Failure successfully', async () => {
    expect(() => {
      render(<Failure error={new Error('Oh no')} />)
    }).not.toThrow()
  })

  // When you're ready to test the actual output of your component render
  // you could test that, for example, certain text is present:
  //
  // 1. import { screen } from '@redwoodjs/testing/web'
  // 2. Add test: expect(screen.getByText('Hello, world')).toBeInTheDocument()

  it('renders Success successfully', async () => {
    expect(() => {
      render(<Success user={standard().user} />)
    }).not.toThrow()
  })
})
"
`;

exports[`Snake case words creates a cell component with a snakeCase word name 1`] = `
"export const QUERY = gql\`
  query FindUserProfileQuery($id: Int!) {
    userProfile: userProfile(id: $id) {
      id
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Empty</div>

export const Failure = ({ error }) => (
  <div style={{ color: 'red' }}>Error: {error?.message}</div>
)

export const Success = ({ userProfile }) => {
  return <div>{JSON.stringify(userProfile)}</div>
}
"
`;

exports[`Snake case words creates a cell mock with a snakeCase word name 1`] = `
"// Define your own mock data here:
export const standard = (/* vars, { ctx, req } */) => ({
  userProfile: {
    id: 42,
  },
})
"
`;

exports[`Snake case words creates a cell stories with a snakeCase word name 1`] = `
"import { Loading, Empty, Failure, Success } from './UserProfileCell'
import { standard } from './UserProfileCell.mock'

export const loading = () => {
  return Loading ? <Loading /> : <></>
}

export const empty = () => {
  return Empty ? <Empty /> : <></>
}

export const failure = (args) => {
  return Failure ? <Failure error={new Error('Oh no')} {...args} /> : <></>
}

export const success = (args) => {
  return Success ? <Success {...standard()} {...args} /> : <></>
}

export default { title: 'Cells/UserProfileCell' }
"
`;

exports[`Snake case words creates a cell test with a snakeCase word name 1`] = `
"import { render } from '@redwoodjs/testing/web'
import { Loading, Empty, Failure, Success } from './UserProfileCell'
import { standard } from './UserProfileCell.mock'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//           Please refer to the RedwoodJS Testing Docs:
//        https://redwoodjs.com/docs/testing#testing-cells
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('UserProfileCell', () => {
  it('renders Loading successfully', () => {
    expect(() => {
      render(<Loading />)
    }).not.toThrow()
  })

  it('renders Empty successfully', async () => {
    expect(() => {
      render(<Empty />)
    }).not.toThrow()
  })

  it('renders Failure successfully', async () => {
    expect(() => {
      render(<Failure error={new Error('Oh no')} />)
    }).not.toThrow()
  })

  // When you're ready to test the actual output of your component render
  // you could test that, for example, certain text is present:
  //
  // 1. import { screen } from '@redwoodjs/testing/web'
  // 2. Add test: expect(screen.getByText('Hello, world')).toBeInTheDocument()

  it('renders Success successfully', async () => {
    expect(() => {
      render(<Success userProfile={standard().userProfile} />)
    }).not.toThrow()
  })
})
"
`;

exports[`TypeScript: generates list cells if list flag passed in 1`] = `
"import type { FindBazingaQuery, FindBazingaQueryVariables } from 'types/graphql'
import type { CellSuccessProps, CellFailureProps } from '@redwoodjs/web'

export const QUERY = gql\`
  query FindBazingaQuery($id: Int!) {
    bazinga: bazinga(id: $id) {
      id
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Empty</div>

export const Failure = ({
  error,
}: CellFailureProps<FindBazingaQueryVariables>) => (
  <div style={{ color: 'red' }}>Error: {error?.message}</div>
)

export const Success = ({
  bazinga,
}: CellSuccessProps<FindBazingaQuery, FindBazingaQueryVariables>) => {
  return <div>{JSON.stringify(bazinga)}</div>
}
"
`;

exports[`TypeScript: generates list cells if list flag passed in 2`] = `
"import { render } from '@redwoodjs/testing/web'
import { Loading, Empty, Failure, Success } from './BazingaCell'
import { standard } from './BazingaCell.mock'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//           Please refer to the RedwoodJS Testing Docs:
//        https://redwoodjs.com/docs/testing#testing-cells
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('BazingaCell', () => {
  it('renders Loading successfully', () => {
    expect(() => {
      render(<Loading />)
    }).not.toThrow()
  })

  it('renders Empty successfully', async () => {
    expect(() => {
      render(<Empty />)
    }).not.toThrow()
  })

  it('renders Failure successfully', async () => {
    expect(() => {
      render(<Failure error={new Error('Oh no')} />)
    }).not.toThrow()
  })

  // When you're ready to test the actual output of your component render
  // you could test that, for example, certain text is present:
  //
  // 1. import { screen } from '@redwoodjs/testing/web'
  // 2. Add test: expect(screen.getByText('Hello, world')).toBeInTheDocument()

  it('renders Success successfully', async () => {
    expect(() => {
      render(<Success bazinga={standard().bazinga} />)
    }).not.toThrow()
  })
})
"
`;

exports[`TypeScript: generates list cells if list flag passed in 3`] = `
"import type { ComponentStory } from '@storybook/react'

import { Loading, Empty, Failure, Success } from './BazingaCell'
import { standard } from './BazingaCell.mock'

export const loading = () => {
  return Loading ? <Loading /> : <></>
}

export const empty = () => {
  return Empty ? <Empty /> : <></>
}

export const failure: ComponentStory<typeof Failure> = (args) => {
  return Failure ? <Failure error={new Error('Oh no')} {...args} /> : <></>
}

export const success: ComponentStory<typeof Success> = (args) => {
  return Success ? <Success {...standard()} {...args} /> : <></>
}

export default { title: 'Cells/BazingaCell' }
"
`;

exports[`TypeScript: generates list cells if list flag passed in 4`] = `
"// Define your own mock data here:
export const standard = (/* vars, { ctx, req } */) => ({
  bazinga: {
    id: 42,
  },
})
"
`;

exports[`TypeScript: generates list cells if name is plural 1`] = `
"import type { MembersQuery } from 'types/graphql'
import type { CellSuccessProps, CellFailureProps } from '@redwoodjs/web'

export const QUERY = gql\`
  query MembersQuery {
    members {
      id
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Empty</div>

export const Failure = ({ error }: CellFailureProps) => (
  <div style={{ color: 'red' }}>Error: {error?.message}</div>
)

export const Success = ({ members }: CellSuccessProps<MembersQuery>) => {
  return (
    <ul>
      {members.map((item) => {
        return <li key={item.id}>{JSON.stringify(item)}</li>
      })}
    </ul>
  )
}
"
`;

exports[`camelCase words creates a cell component with a camelCase word name 1`] = `
"export const QUERY = gql\`
  query FindUserProfileQuery($id: Int!) {
    userProfile: userProfile(id: $id) {
      id
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Empty</div>

export const Failure = ({ error }) => (
  <div style={{ color: 'red' }}>Error: {error?.message}</div>
)

export const Success = ({ userProfile }) => {
  return <div>{JSON.stringify(userProfile)}</div>
}
"
`;

exports[`camelCase words creates a cell mock with a camelCase word name 1`] = `
"// Define your own mock data here:
export const standard = (/* vars, { ctx, req } */) => ({
  userProfile: {
    id: 42,
  },
})
"
`;

exports[`camelCase words creates a cell stories with a camelCase word name 1`] = `
"import { Loading, Empty, Failure, Success } from './UserProfileCell'
import { standard } from './UserProfileCell.mock'

export const loading = () => {
  return Loading ? <Loading /> : <></>
}

export const empty = () => {
  return Empty ? <Empty /> : <></>
}

export const failure = (args) => {
  return Failure ? <Failure error={new Error('Oh no')} {...args} /> : <></>
}

export const success = (args) => {
  return Success ? <Success {...standard()} {...args} /> : <></>
}

export default { title: 'Cells/UserProfileCell' }
"
`;

exports[`camelCase words creates a cell test with a camelCase word name 1`] = `
"import { render } from '@redwoodjs/testing/web'
import { Loading, Empty, Failure, Success } from './UserProfileCell'
import { standard } from './UserProfileCell.mock'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//           Please refer to the RedwoodJS Testing Docs:
//        https://redwoodjs.com/docs/testing#testing-cells
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('UserProfileCell', () => {
  it('renders Loading successfully', () => {
    expect(() => {
      render(<Loading />)
    }).not.toThrow()
  })

  it('renders Empty successfully', async () => {
    expect(() => {
      render(<Empty />)
    }).not.toThrow()
  })

  it('renders Failure successfully', async () => {
    expect(() => {
      render(<Failure error={new Error('Oh no')} />)
    }).not.toThrow()
  })

  // When you're ready to test the actual output of your component render
  // you could test that, for example, certain text is present:
  //
  // 1. import { screen } from '@redwoodjs/testing/web'
  // 2. Add test: expect(screen.getByText('Hello, world')).toBeInTheDocument()

  it('renders Success successfully', async () => {
    expect(() => {
      render(<Success userProfile={standard().userProfile} />)
    }).not.toThrow()
  })
})
"
`;

exports[`generates a cell with a string primary id key 1`] = `
"export const QUERY = gql\`
  query FindAddressQuery($id: String!) {
    address: address(id: $id) {
      id
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Empty</div>

export const Failure = ({ error }) => (
  <div style={{ color: 'red' }}>Error: {error?.message}</div>
)

export const Success = ({ address }) => {
  return <div>{JSON.stringify(address)}</div>
}
"
`;

exports[`generates a cell with a string primary id key 2`] = `
"import { render } from '@redwoodjs/testing/web'
import { Loading, Empty, Failure, Success } from './AddressCell'
import { standard } from './AddressCell.mock'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//           Please refer to the RedwoodJS Testing Docs:
//        https://redwoodjs.com/docs/testing#testing-cells
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('AddressCell', () => {
  it('renders Loading successfully', () => {
    expect(() => {
      render(<Loading />)
    }).not.toThrow()
  })

  it('renders Empty successfully', async () => {
    expect(() => {
      render(<Empty />)
    }).not.toThrow()
  })

  it('renders Failure successfully', async () => {
    expect(() => {
      render(<Failure error={new Error('Oh no')} />)
    }).not.toThrow()
  })

  // When you're ready to test the actual output of your component render
  // you could test that, for example, certain text is present:
  //
  // 1. import { screen } from '@redwoodjs/testing/web'
  // 2. Add test: expect(screen.getByText('Hello, world')).toBeInTheDocument()

  it('renders Success successfully', async () => {
    expect(() => {
      render(<Success address={standard().address} />)
    }).not.toThrow()
  })
})
"
`;

exports[`generates a cell with a string primary id key 3`] = `
"import { Loading, Empty, Failure, Success } from './AddressCell'
import { standard } from './AddressCell.mock'

export const loading = () => {
  return Loading ? <Loading /> : <></>
}

export const empty = () => {
  return Empty ? <Empty /> : <></>
}

export const failure = (args) => {
  return Failure ? <Failure error={new Error('Oh no')} {...args} /> : <></>
}

export const success = (args) => {
  return Success ? <Success {...standard()} {...args} /> : <></>
}

export default { title: 'Cells/AddressCell' }
"
`;

exports[`generates a cell with a string primary id key 4`] = `
"// Define your own mock data here:
export const standard = (/* vars, { ctx, req } */) => ({
  address: {
    id: '42',
  },
})
"
`;

exports[`generates list a cell with a string primary id keys 1`] = `
"export const QUERY = gql\`
  query AddressesQuery {
    addresses {
      id
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Empty</div>

export const Failure = ({ error }) => (
  <div style={{ color: 'red' }}>Error: {error?.message}</div>
)

export const Success = ({ addresses }) => {
  return (
    <ul>
      {addresses.map((item) => {
        return <li key={item.id}>{JSON.stringify(item)}</li>
      })}
    </ul>
  )
}
"
`;

exports[`generates list a cell with a string primary id keys 2`] = `
"import { render } from '@redwoodjs/testing/web'
import { Loading, Empty, Failure, Success } from './AddressesCell'
import { standard } from './AddressesCell.mock'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//           Please refer to the RedwoodJS Testing Docs:
//        https://redwoodjs.com/docs/testing#testing-cells
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('AddressesCell', () => {
  it('renders Loading successfully', () => {
    expect(() => {
      render(<Loading />)
    }).not.toThrow()
  })

  it('renders Empty successfully', async () => {
    expect(() => {
      render(<Empty />)
    }).not.toThrow()
  })

  it('renders Failure successfully', async () => {
    expect(() => {
      render(<Failure error={new Error('Oh no')} />)
    }).not.toThrow()
  })

  // When you're ready to test the actual output of your component render
  // you could test that, for example, certain text is present:
  //
  // 1. import { screen } from '@redwoodjs/testing/web'
  // 2. Add test: expect(screen.getByText('Hello, world')).toBeInTheDocument()

  it('renders Success successfully', async () => {
    expect(() => {
      render(<Success addresses={standard().addresses} />)
    }).not.toThrow()
  })
})
"
`;

exports[`generates list a cell with a string primary id keys 3`] = `
"import { Loading, Empty, Failure, Success } from './AddressesCell'
import { standard } from './AddressesCell.mock'

export const loading = () => {
  return Loading ? <Loading /> : <></>
}

export const empty = () => {
  return Empty ? <Empty /> : <></>
}

export const failure = (args) => {
  return Failure ? <Failure error={new Error('Oh no')} {...args} /> : <></>
}

export const success = (args) => {
  return Success ? <Success {...standard()} {...args} /> : <></>
}

export default { title: 'Cells/AddressesCell' }
"
`;

exports[`generates list a cell with a string primary id keys 4`] = `
"// Define your own mock data here:
export const standard = (/* vars, { ctx, req } */) => ({
  addresses: [{ id: '42' }, { id: '43' }, { id: '44' }],
})
"
`;

exports[`generates list cells if list flag passed in 1`] = `
"export const QUERY = gql\`
  query MembersQuery {
    members {
      id
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Empty</div>

export const Failure = ({ error }) => (
  <div style={{ color: 'red' }}>Error: {error?.message}</div>
)

export const Success = ({ members }) => {
  return (
    <ul>
      {members.map((item) => {
        return <li key={item.id}>{JSON.stringify(item)}</li>
      })}
    </ul>
  )
}
"
`;

exports[`generates list cells if list flag passed in 2`] = `
"import { render } from '@redwoodjs/testing/web'
import { Loading, Empty, Failure, Success } from './MembersCell'
import { standard } from './MembersCell.mock'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//           Please refer to the RedwoodJS Testing Docs:
//        https://redwoodjs.com/docs/testing#testing-cells
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('MembersCell', () => {
  it('renders Loading successfully', () => {
    expect(() => {
      render(<Loading />)
    }).not.toThrow()
  })

  it('renders Empty successfully', async () => {
    expect(() => {
      render(<Empty />)
    }).not.toThrow()
  })

  it('renders Failure successfully', async () => {
    expect(() => {
      render(<Failure error={new Error('Oh no')} />)
    }).not.toThrow()
  })

  // When you're ready to test the actual output of your component render
  // you could test that, for example, certain text is present:
  //
  // 1. import { screen } from '@redwoodjs/testing/web'
  // 2. Add test: expect(screen.getByText('Hello, world')).toBeInTheDocument()

  it('renders Success successfully', async () => {
    expect(() => {
      render(<Success members={standard().members} />)
    }).not.toThrow()
  })
})
"
`;

exports[`generates list cells if list flag passed in 3`] = `
"import { Loading, Empty, Failure, Success } from './MembersCell'
import { standard } from './MembersCell.mock'

export const loading = () => {
  return Loading ? <Loading /> : <></>
}

export const empty = () => {
  return Empty ? <Empty /> : <></>
}

export const failure = (args) => {
  return Failure ? <Failure error={new Error('Oh no')} {...args} /> : <></>
}

export const success = (args) => {
  return Success ? <Success {...standard()} {...args} /> : <></>
}

export default { title: 'Cells/MembersCell' }
"
`;

exports[`generates list cells if list flag passed in 4`] = `
"// Define your own mock data here:
export const standard = (/* vars, { ctx, req } */) => ({
  members: [{ id: 42 }, { id: 43 }, { id: 44 }],
})
"
`;

exports[`generates list cells if name is plural 1`] = `
"export const QUERY = gql\`
  query MembersQuery {
    members {
      id
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Empty</div>

export const Failure = ({ error }) => (
  <div style={{ color: 'red' }}>Error: {error?.message}</div>
)

export const Success = ({ members }) => {
  return (
    <ul>
      {members.map((item) => {
        return <li key={item.id}>{JSON.stringify(item)}</li>
      })}
    </ul>
  )
}
"
`;
