"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.parseDatamodel = void 0;

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/json/stringify"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/for-each"));

var _find = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/find"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _entries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/entries"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _sdk = require("@prisma/sdk");

var esbuild = _interopRequireWildcard(require("esbuild"));

var _internal = require("@redwoodjs/internal");

const DATAMODEL_PATH = _path.default.join((0, _internal.getPaths)().api.models, 'datamodel.js');

const MODELS_PATH = _path.default.join((0, _internal.getPaths)().api.src, 'models');

const MODELS_INDEX_PATH = _path.default.join(MODELS_PATH, 'index.js');

const indexLines = ['// This file is autogenerated by Redwood and will be overwitten periodically', '', "import { db } from 'src/lib/db'", "import datamodel from 'src/models/datamodel'", "import { RedwoodRecord } from '@redwoodjs/record'", '', 'RedwoodRecord.db = db', 'RedwoodRecord.schema = datamodel', ''];
const modelImports = [];
const modelRequires = {};
let datamodel; // parse datamodel and write out cache

const parseDatamodel = () => {
  (0, _sdk.getDMMF)({
    datamodelPath: (0, _internal.getPaths)().api.dbSchema
  }).then(schema => {
    var _context, _context2;

    datamodel = schema.datamodel;

    _fs.default.writeFileSync(DATAMODEL_PATH, esbuild.transformSync((0, _stringify.default)(datamodel, null, 2), {
      loader: 'json',
      format: 'cjs'
    }).code);

    console.info(`\n  Wrote ${DATAMODEL_PATH}`); // figure out what model classes are present

    const modelNames = (0, _filter.default)(_context = (0, _map.default)(_context2 = _fs.default.readdirSync(MODELS_PATH)).call(_context2, file => {
      if (file !== 'index.js' && file !== 'datamodel.js') {
        return file.split('.')[0];
      }
    })).call(_context, val => val);
    (0, _forEach.default)(modelNames).call(modelNames, modelName => {
      var _context3;

      // which other models this model requires
      const thisModelRequires = []; // import statements

      modelImports.push(`import ${modelName} from 'src/models/${modelName}'`); // requireModel declarations

      const schemaModel = (0, _find.default)(_context3 = datamodel.models).call(_context3, model => model.name === modelName);

      if (schemaModel) {
        var _context4;

        (0, _forEach.default)(_context4 = schemaModel.fields).call(_context4, field => {
          if (field.kind === 'object' && (0, _includes.default)(modelNames).call(modelNames, field.type)) {
            thisModelRequires.push(field.type);
          }
        });
        modelRequires[modelName] = thisModelRequires;
      }
    });
    (0, _forEach.default)(modelImports).call(modelImports, modelImport => {
      indexLines.push(modelImport);
    });
    indexLines.push('');

    for (const [name, requires] of (0, _entries.default)(modelRequires)) {
      indexLines.push(`${name}.requiredModels = [${requires.join(', ')}]`);
    }

    indexLines.push('');
    indexLines.push(`export { ${modelNames.join(', ')} }`);
    indexLines.push(''); // empty newline at end

    _fs.default.writeFileSync(MODELS_INDEX_PATH, indexLines.join('\n'));

    console.info(`  Wrote ${MODELS_INDEX_PATH}\n`);
  });
};

exports.parseDatamodel = parseDatamodel;