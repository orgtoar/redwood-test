#!/usr/bin/env node
/* eslint-env node, es6*/
//@ts-check
const fs = require('fs')
const path = require('path')

/**
 * This file builds the framework packages and copies them to a specific directory.
 * It's used by `yarn rwt link`.
 *
 * TODO: Consider making `rwt` an alias which is `yarn --cwd path-to-framework-tools` and move
 * all the rwt commands into the framework-tools folder.
 *
 * TODO: Consider adding `rwt build`, deprecating this file, and using a combination of:
 * `yarn rwt link, rwt build, rwt cp` in order to reduce the number different files that
 * do almost same thing.
 */

// @NOTE: not all of these modules are defined as dependencies in core
// This is because some of them are transitive dependencies through redwood/cli for example
const chalk = require('chalk')
const chokidar = require('chokidar')
const execa = require('execa')
const { glob } = require('glob')
const _ = require('lodash')
const packlist = require('npm-packlist')
const yargs = require('yargs')

const args = yargs
  .option('watch', { default: false, type: 'boolean', alias: 'w' })
  .option('dest', { required: true, type: 'string', alias: 'd' })
  .option('only', { required: false, type: 'string', alias: 'o' })
  // .command('build-link')
  // .example('build-link --dest /tmp/redwood-app/packages')
  .help()
  .strict().argv

const { dest, watch, only } = args

/** The framework base path */
const RW_BASEPATH = path.join(__dirname, '../')

const packagePaths = glob
  .sync('packages/*', {
    cwd: RW_BASEPATH,
  })
  .filter((packagePath) => (only ? packagePath.includes(only) : true))
  .filter((packageName) => !packageName.includes('create-redwood-app'))

const build = async ({ packageFolderName }) => {
  const execaOptionsForBase = {
    shell: true,
    stdio: 'inherit',
    cleanup: true,
    cwd: RW_BASEPATH,
  }

  await execa(
    'yarn framework lerna run',
    [
      'build',
      '--parallel',
      packageFolderName && `--scope @redwoodjs/${packageFolderName}`,
    ],
    execaOptionsForBase
  )

  return execa(
    'yarn framework lerna run',
    [
      'fix:permissions',
      '--parallel',
      packageFolderName && `--scope @redwoodjs/${packageFolderName}`,
    ],
    execaOptionsForBase
  )
}

const copyDistFiles = ({ packageFolderName }) => {
  return Promise.all(
    packagePaths
      // Only copy things in the package specified by --only
      // If not, run it for all packages
      .filter((packagePath) =>
        packageFolderName ? packagePath.includes(packageFolderName) : true
      )
      .map((packagePath) => {
        const pkgJson = require(path.join(
          RW_BASEPATH,
          packagePath,
          'package.json'
        ))

        return packlist({ path: packagePath }).then((files) => {
          const destinationDir = path.join(
            dest,
            `/${pkgJson.name.replace('@redwoodjs/', '')}`
          )

          files.forEach((file) => {
            copyPackageFileToDest(packagePath, file, destinationDir)
          })
          return files
        })
      })
  )
}

// Creates folders where required, before copying
const copyPackageFileToDest = (packagePath, relativeSrc, dest) => {
  const dirName = path.dirname(path.join(dest, `/${relativeSrc}`))
  const fileName = path.basename(relativeSrc)

  const exist = fs.existsSync(dirName)
  if (!exist) {
    fs.mkdirSync(dirName, { recursive: true })
  }

  fs.copyFileSync(
    path.join(RW_BASEPATH, packagePath, relativeSrc),
    path.join(dirName, fileName)
  )
}

// Assigned if watch is true
let watchHandle

process.on('SIGINT', () => {
  watchHandle?.close()
})

const runAsync = async () => {
  try {
    await build({
      packageFolderName: only,
    })

    await copyDistFiles({
      packageFolderName: only,
    })
  } catch (e) {
    console.error(
      `\n [rwt link] ${chalk.red.bold(
        'error'
      )} - Could not build your redwood framework.`
    )

    console.log()

    console.error(e)
    process.exit(1)
  }
}

const onChange = _.debounce(async (packageFolderName) => {
  console.log('[rwt link] Building ðŸ“¦...', packageFolderName)
  try {
    await build({ packageFolderName })
    await copyDistFiles({ packageFolderName })
    console.log(
      `\n [rwt link] ${chalk.greenBright.bold(
        'success'
      )} - @redwoodjs/${packageFolderName} ready to use`
    )
  } catch (e) {
    console.error(
      `\n [rwt link] ${chalk.red.bold(
        'error'
      )} - Could not link @redwoodjs/${packageFolderName}. Build failed.`
    )
  }
  console.log()
}, 200)

// @Note:
// --watch flag starts the watcher, but won't build until change detected
const packageNameRegex = /^^packages\/(\w+-?\w*)\/?/

if (watch) {
  // Start watcher for packages/*, ignore dist
  // if file changed in package/{packageName}, run build and copy for packageName

  watchHandle = chokidar
    .watch(packagePaths, {
      persistent: true,
      ignored: [
        '**/*.test.ts',
        '**/*.test.js',
        '**/__fixtures__/**',
        '**/__tests__/**',
        '**/dist/**',
      ],
    })
    .on('change', (fileName) => {
      const dirName = path.dirname(fileName)
      const packageFolderName = packageNameRegex.exec(dirName)[1]
      onChange(packageFolderName)
    })
} else {
  runAsync()
}
